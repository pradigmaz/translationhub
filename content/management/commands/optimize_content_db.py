"""
Management –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è content
"""

from django.core.management.base import BaseCommand
from django.db import connection, transaction
from django.conf import settings
from django.utils import timezone
from datetime import timedelta
from content.models import ContentAuditLog, TextContent, Project
import logging

logger = logging.getLogger(__name__)


class Command(BaseCommand):
    help = "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è content"

    def add_arguments(self, parser):
        parser.add_argument(
            "--cleanup-logs",
            action="store_true",
            help="–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ –∞—É–¥–∏—Ç–∞ (—Å—Ç–∞—Ä—à–µ 90 –¥–Ω–µ–π)",
        )
        parser.add_argument(
            "--cleanup-drafts",
            action="store_true",
            help="–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∏ (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)",
        )
        parser.add_argument(
            "--vacuum",
            action="store_true",
            help="–í—ã–ø–æ–ª–Ω–∏—Ç—å VACUUM –¥–ª—è SQLite (–æ—Å–≤–æ–±–æ–¥–∏—Ç—å –º–µ—Å—Ç–æ)",
        )
        parser.add_argument(
            "--analyze",
            action="store_true",
            help="–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–∞–±–ª–∏—Ü –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞ –∑–∞–ø—Ä–æ—Å–æ–≤",
        )
        parser.add_argument(
            "--dry-run",
            action="store_true",
            help="–ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ, –Ω–æ –Ω–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è",
        )

    def handle(self, *args, **options):
        self.stdout.write(
            self.style.SUCCESS("üîß –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è content")
        )

        if options["dry_run"]:
            self.stdout.write(
                self.style.WARNING("üîç –†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (–∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω—ã)")
            )

        # –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ –∞—É–¥–∏—Ç–∞
        if options["cleanup_logs"]:
            self.cleanup_audit_logs(options["dry_run"])

        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤
        if options["cleanup_drafts"]:
            self.cleanup_old_drafts(options["dry_run"])

        # VACUUM –¥–ª—è SQLite
        if options["vacuum"]:
            self.vacuum_database(options["dry_run"])

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        if options["analyze"]:
            self.analyze_database(options["dry_run"])

        self.stdout.write(self.style.SUCCESS("\n‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞"))

    def cleanup_audit_logs(self, dry_run=False):
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ –∞—É–¥–∏—Ç–∞"""
        self.stdout.write("\nüóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ –∞—É–¥–∏—Ç–∞...")

        # –£–¥–∞–ª—è–µ–º –ª–æ–≥–∏ —Å—Ç–∞—Ä—à–µ 90 –¥–Ω–µ–π
        cutoff_date = timezone.now() - timedelta(days=90)
        old_logs = ContentAuditLog.objects.filter(timestamp__lt=cutoff_date)
        count = old_logs.count()

        if count == 0:
            self.stdout.write("  ‚Ä¢ –°—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        self.stdout.write(f"  ‚Ä¢ –ù–∞–π–¥–µ–Ω–æ {count} —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")

        if not dry_run:
            with transaction.atomic():
                deleted_count, _ = old_logs.delete()
                self.stdout.write(
                    self.style.SUCCESS(f"  ‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} –ª–æ–≥–æ–≤")
                )
                logger.info(f"Cleaned up {deleted_count} old audit logs")
        else:
            self.stdout.write("  üîç (dry-run) –õ–æ–≥–∏ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã")

    def cleanup_old_drafts(self, dry_run=False):
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∏"""
        self.stdout.write("\nüìù –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤...")

        # –ù–∞—Ö–æ–¥–∏–º —á–µ—Ä–Ω–æ–≤–∏–∫–∏ —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        cutoff_date = timezone.now() - timedelta(days=30)
        old_drafts = TextContent.objects.filter(
            is_draft=True,
            updated_at__lt=cutoff_date,
            draft_content="",  # –ü—É—Å—Ç—ã–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∏
        )
        count = old_drafts.count()

        if count == 0:
            self.stdout.write("  ‚Ä¢ –°—Ç–∞—Ä—ã—Ö —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        self.stdout.write(f"  ‚Ä¢ –ù–∞–π–¥–µ–Ω–æ {count} —Å—Ç–∞—Ä—ã—Ö –ø—É—Å—Ç—ã—Ö —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤")

        if not dry_run:
            with transaction.atomic():
                deleted_count, _ = old_drafts.delete()
                self.stdout.write(
                    self.style.SUCCESS(f"  ‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤")
                )
                logger.info(f"Cleaned up {deleted_count} old draft texts")
        else:
            self.stdout.write("  üîç (dry-run) –ß–µ—Ä–Ω–æ–≤–∏–∫–∏ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã")

    def vacuum_database(self, dry_run=False):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç VACUUM –¥–ª—è SQLite"""
        self.stdout.write("\nüóúÔ∏è  –°–∂–∞—Ç–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

        if "sqlite" not in settings.DATABASES["default"]["ENGINE"]:
            self.stdout.write(
                self.style.WARNING("  ‚ö†Ô∏è  VACUUM –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è SQLite")
            )
            return

        if not dry_run:
            try:
                with connection.cursor() as cursor:
                    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –ë–î –¥–æ VACUUM
                    cursor.execute("PRAGMA page_count")
                    pages_before = cursor.fetchone()[0]

                    cursor.execute("PRAGMA page_size")
                    page_size = cursor.fetchone()[0]

                    size_before = pages_before * page_size

                    # –í—ã–ø–æ–ª–Ω—è–µ–º VACUUM
                    cursor.execute("VACUUM")

                    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ VACUUM
                    cursor.execute("PRAGMA page_count")
                    pages_after = cursor.fetchone()[0]

                    size_after = pages_after * page_size
                    saved_bytes = size_before - size_after

                    self.stdout.write(
                        self.style.SUCCESS(
                            f"  ‚úÖ VACUUM –≤—ã–ø–æ–ª–Ω–µ–Ω. –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ: {saved_bytes / 1024:.1f} KB"
                        )
                    )
                    logger.info(f"Database VACUUM completed, saved {saved_bytes} bytes")

            except Exception as e:
                self.stdout.write(self.style.ERROR(f"  ‚ùå –û—à–∏–±–∫–∞ VACUUM: {e}"))
                logger.error(f"VACUUM failed: {e}")
        else:
            self.stdout.write("  üîç (dry-run) VACUUM –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω")

    def analyze_database(self, dry_run=False):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–∞–±–ª–∏—Ü"""
        self.stdout.write("\nüìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–∞–±–ª–∏—Ü...")

        if "sqlite" not in settings.DATABASES["default"]["ENGINE"]:
            self.stdout.write(
                self.style.WARNING("  ‚ö†Ô∏è  ANALYZE –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è SQLite")
            )
            return

        if not dry_run:
            try:
                with connection.cursor() as cursor:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü content
                    tables = [
                        "content_project",
                        "content_textcontent",
                        "content_imagecontent",
                        "content_contentauditlog",
                    ]

                    for table in tables:
                        cursor.execute(f"ANALYZE {table}")
                        self.stdout.write(f"  ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è {table}")

                    logger.info("Database statistics updated for content tables")

            except Exception as e:
                self.stdout.write(self.style.ERROR(f"  ‚ùå –û—à–∏–±–∫–∞ ANALYZE: {e}"))
                logger.error(f"ANALYZE failed: {e}")
        else:
            self.stdout.write("  üîç (dry-run) –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∞")

    def get_database_size(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        if "sqlite" in settings.DATABASES["default"]["ENGINE"]:
            try:
                with connection.cursor() as cursor:
                    cursor.execute("PRAGMA page_count")
                    pages = cursor.fetchone()[0]

                    cursor.execute("PRAGMA page_size")
                    page_size = cursor.fetchone()[0]

                    return pages * page_size
            except Exception:
                return 0
        return 0
