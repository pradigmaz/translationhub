"""
Management –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è content
"""

from django.core.management.base import BaseCommand
from django.db import connection
from django.conf import settings
from content.models import Project, TextContent, ImageContent, ContentAuditLog
from content.performance import DatabaseProfiler, get_content_performance_report
import json


class Command(BaseCommand):
    help = '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è content –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏'

    def add_arguments(self, parser):
        parser.add_argument(
            '--detailed',
            action='store_true',
            help='–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∑–∞–ø—Ä–æ—Å–æ–≤',
        )
        parser.add_argument(
            '--export',
            type=str,
            help='–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –≤ JSON —Ñ–∞–π–ª',
        )
        parser.add_argument(
            '--check-indexes',
            action='store_true',
            help='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏–Ω–¥–µ–∫—Å–æ–≤',
        )

    def handle(self, *args, **options):
        self.stdout.write(
            self.style.SUCCESS('üîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è content')
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–∏–π –æ—Ç—á–µ—Ç
        report = get_content_performance_report()
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ë–î
        self.show_database_stats(report['database_stats'])
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã
        if settings.DEBUG:
            self.analyze_queries(report['query_stats'], options['detailed'])
        else:
            self.stdout.write(
                self.style.WARNING(
                    '‚ö†Ô∏è  –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ DEBUG —Ä–µ–∂–∏–º–µ'
                )
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å—ã
        if options['check_indexes']:
            self.check_database_indexes()
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        self.suggest_optimizations(report)
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        if options['export']:
            self.export_report(report, options['export'])

    def show_database_stats(self, stats):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        self.stdout.write('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:')
        self.stdout.write(f"  ‚Ä¢ –ü—Ä–æ–µ–∫—Ç—ã: {stats['projects_count']}")
        self.stdout.write(f"  ‚Ä¢ –¢–µ–∫—Å—Ç—ã: {stats['texts_count']}")
        self.stdout.write(f"  ‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {stats['images_count']}")
        self.stdout.write(f"  ‚Ä¢ –õ–æ–≥–∏ –∞—É–¥–∏—Ç–∞: {stats['audit_logs_count']}")

    def analyze_queries(self, query_stats, detailed=False):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤"""
        self.stdout.write('\nüöÄ –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–æ–≤:')
        
        if query_stats.get('error'):
            self.stdout.write(
                self.style.WARNING(f"  ‚ö†Ô∏è  {query_stats['error']}")
            )
            return
        
        total_queries = query_stats.get('total_queries', 0)
        if total_queries == 0:
            self.stdout.write('  ‚Ä¢ –ó–∞–ø—Ä–æ—Å—ã –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∏—Å—å')
            return
        
        self.stdout.write(f"  ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_queries}")
        self.stdout.write(f"  ‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è: {query_stats.get('total_time_ms', 0):.1f}ms")
        self.stdout.write(f"  ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {query_stats.get('avg_time_ms', 0):.1f}ms")
        self.stdout.write(f"  ‚Ä¢ –ú–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {query_stats.get('slow_queries_count', 0)}")
        
        if detailed:
            slow_queries = DatabaseProfiler.analyze_slow_queries()
            if slow_queries:
                self.stdout.write('\nüêå –ú–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:')
                for i, query in enumerate(slow_queries[:5], 1):
                    self.stdout.write(f"  {i}. {query['time_ms']:.1f}ms: {query['sql'][:100]}...")

    def check_database_indexes(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏–Ω–¥–µ–∫—Å–æ–≤"""
        self.stdout.write('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤:')
        
        with connection.cursor() as cursor:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è SQLite
            if 'sqlite' in settings.DATABASES['default']['ENGINE']:
                cursor.execute("""
                    SELECT name, sql FROM sqlite_master 
                    WHERE type='index' AND name LIKE 'content_%'
                    ORDER BY name
                """)
                indexes = cursor.fetchall()
                
                if indexes:
                    self.stdout.write('  ‚úÖ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã:')
                    for name, sql in indexes:
                        self.stdout.write(f"    ‚Ä¢ {name}")
                else:
                    self.stdout.write('  ‚ùå –ò–Ω–¥–µ–∫—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
            else:
                self.stdout.write('  ‚ÑπÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è SQLite')

    def suggest_optimizations(self, report):
        """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        self.stdout.write('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:')
        
        stats = report['database_stats']
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–ø–∏—Å–µ–π
        if stats['texts_count'] > 1000:
            self.stdout.write('  üìù –ë–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–∫—Å—Ç–æ–≤:')
            self.stdout.write('    ‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤')
            self.stdout.write('    ‚Ä¢ –£–≤–µ–ª–∏—á—å—Ç–µ —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏')
        
        if stats['audit_logs_count'] > 10000:
            self.stdout.write('  üìã –ë–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–æ–≤ –∞—É–¥–∏—Ç–∞:')
            self.stdout.write('    ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤')
            self.stdout.write('    ‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ª–æ–≥–æ–≤')
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—é
        cache_backend = report.get('cache_info', {}).get('cache_backend', '')
        if 'dummy' in cache_backend.lower():
            self.stdout.write('  üö® –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ:')
            self.stdout.write('    ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Redis –∏–ª–∏ Memcached –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞')
            self.stdout.write('    ‚Ä¢ –í–∫–ª—é—á–∏—Ç–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞ –∏ –ø—Ä–æ–µ–∫—Ç–æ–≤')
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–∞–ø—Ä–æ—Å–∞–º
        query_stats = report.get('query_stats', {})
        slow_queries_count = query_stats.get('slow_queries_count', 0)
        if slow_queries_count > 0:
            self.stdout.write(f'  üêå –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {slow_queries_count} –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:')
            self.stdout.write('    ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ select_related –∏ prefetch_related')
            self.stdout.write('    ‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø–æ–ª–µ–π')
            self.stdout.write('    ‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ —Å–ª–æ–∂–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã')

    def export_report(self, report, filename):
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –≤ JSON —Ñ–∞–π–ª"""
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(report, f, indent=2, ensure_ascii=False, default=str)
            
            self.stdout.write(
                self.style.SUCCESS(f'\n‚úÖ –û—Ç—á–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ {filename}')
            )
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'\n‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}')
            )

    def style_performance_level(self, level):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        if level == 'excellent':
            return self.style.SUCCESS('–û—Ç–ª–∏—á–Ω–æ')
        elif level == 'good':
            return self.style.SUCCESS('–•–æ—Ä–æ—à–æ')
        elif level == 'average':
            return self.style.WARNING('–°—Ä–µ–¥–Ω–µ')
        elif level == 'poor':
            return self.style.ERROR('–ü–ª–æ—Ö–æ')
        else:
            return level