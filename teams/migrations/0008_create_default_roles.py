# Generated by Django 5.2.5 on 2025-10-12 18:08

from django.db import migrations
import logging

logger = logging.getLogger(__name__)


def create_default_roles(apps, schema_editor):
    """
    Создает стандартные роли системы с их разрешениями.
    
    Эта функция создает следующие стандартные роли:
    - Руководитель: полные права управления командой и проектами
    - Редактор: управление контентом и рецензирование
    - Переводчик: создание и редактирование переводов
    - Клинер: обработка изображений и очистка
    - Тайпер: типографское оформление
    """
    Role = apps.get_model('teams', 'Role')
    Permission = apps.get_model('auth', 'Permission')
    ContentType = apps.get_model('contenttypes', 'ContentType')
    
    # Определение стандартных ролей с их разрешениями
    DEFAULT_ROLES = {
        'Пользователь': {
            'description': 'Базовая роль для всех зарегистрированных пользователей',
            'permissions': []  # Никаких специальных разрешений, только базовые права Django
        },
        'Руководитель': {
            'description': 'Руководитель команды с полными правами управления',
            'permissions': [
                # Разрешения для команд
                'can_manage_team',
                'can_invite_members',
                'can_remove_members',
                'can_assign_roles',
                'can_change_team_status',
                # Разрешения для проектов
                'can_create_project',
                'can_manage_project',
                'can_delete_project',
                'can_assign_chapters',
                # Разрешения для контента
                'can_edit_content',
                'can_review_content',
                'can_publish_content',
            ]
        },
        'Редактор': {
            'description': 'Редактор с правами проверки и адаптации переводов',
            'permissions': [
                # Разрешения для работы с переводами
                'can_edit_content',
                'can_review_content',
            ]
        },
        'Переводчик': {
            'description': 'Переводчик с правами создания и редактирования переводов',
            'permissions': [
                # Разрешения для контента
                'can_edit_content',
            ]
        },
        'Клинер': {
            'description': 'Клинер с правами обработки изображений и очистки',
            'permissions': [
                # Разрешения для контента
                'can_edit_content',
            ]
        },
        'Тайпер': {
            'description': 'Тайпер с правами типографского оформления',
            'permissions': [
                # Разрешения для контента
                'can_edit_content',
            ]
        }
    }
    
    # Получаем content type для teams приложения
    try:
        teams_content_type = ContentType.objects.get(app_label='teams', model='role')
    except ContentType.DoesNotExist:
        logger.error("ContentType для teams.role не найден")
        return
    
    created_roles = []
    updated_roles = []
    
    for role_name, role_data in DEFAULT_ROLES.items():
        try:
            # Создаем или получаем роль
            role, created = Role.objects.get_or_create(
                name=role_name,
                defaults={
                    'description': role_data['description'],
                    'is_default': True
                }
            )
            
            if created:
                created_roles.append(role_name)
                logger.info(f"Создана стандартная роль: {role_name}")
            else:
                # Обновляем описание и флаг is_default для существующих ролей
                if not role.is_default:
                    role.is_default = True
                    role.save()
                    updated_roles.append(role_name)
                    logger.info(f"Обновлена роль как стандартная: {role_name}")
            
            # Назначаем разрешения роли
            permissions_to_add = []
            for permission_codename in role_data['permissions']:
                try:
                    permission = Permission.objects.get(
                        codename=permission_codename,
                        content_type=teams_content_type
                    )
                    permissions_to_add.append(permission)
                except Permission.DoesNotExist:
                    logger.warning(f"Разрешение не найдено: {permission_codename}")
            
            # Добавляем разрешения к роли
            if permissions_to_add:
                role.permissions.add(*permissions_to_add)
                logger.debug(f"Добавлено {len(permissions_to_add)} разрешений к роли {role_name}")
                
        except Exception as e:
            logger.error(f"Ошибка при создании роли {role_name}: {str(e)}")
    
    logger.info(f"Завершено создание стандартных ролей. "
               f"Создано: {len(created_roles)}, Обновлено: {len(updated_roles)}")


def reverse_create_default_roles(apps, schema_editor):
    """
    Откат создания стандартных ролей.
    
    Удаляет только стандартные роли (с is_default=True), 
    не затрагивая пользовательские роли.
    """
    Role = apps.get_model('teams', 'Role')
    
    # Список стандартных ролей для удаления
    default_role_names = [
        'Пользователь',
        'Руководитель',
        'Редактор', 
        'Переводчик',
        'Клинер',
        'Тайпер'
    ]
    
    deleted_count = 0
    for role_name in default_role_names:
        try:
            roles_deleted = Role.objects.filter(
                name=role_name,
                is_default=True
            ).delete()
            if roles_deleted[0] > 0:
                deleted_count += roles_deleted[0]
                logger.info(f"Удалена стандартная роль: {role_name}")
        except Exception as e:
            logger.error(f"Ошибка при удалении роли {role_name}: {str(e)}")
    
    logger.info(f"Удалено {deleted_count} стандартных ролей")


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('contenttypes', '0002_remove_content_type_name'),
        ('teams', '0007_alter_role_options_role_created_at_role_is_default_and_more'),
    ]

    operations = [
        migrations.RunPython(
            create_default_roles,
            reverse_create_default_roles,
            hints={'target_db': 'default'}
        ),
    ]
